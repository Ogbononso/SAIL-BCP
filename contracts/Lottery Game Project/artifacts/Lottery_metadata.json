{
	"compiler": {
		"version": "0.8.28+commit.7893614a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "have",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "want",
						"type": "address"
					}
				],
				"name": "OnlyCoordinatorCanFulfill",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "have",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "coordinator",
						"type": "address"
					}
				],
				"name": "OnlyOwnerOrCoordinator",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Raffle__NotOpen",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Raffle__TransferFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZeroAddress",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "vrfCoordinator",
						"type": "address"
					}
				],
				"name": "CoordinatorSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "player",
						"type": "address"
					}
				],
				"name": "EnteredRaffle",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferRequested",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "from",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "winner",
						"type": "address"
					}
				],
				"name": "WinnerPicked",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "buyTicketAndEnterRaffle",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "changeRaffleState",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "checkConditions",
				"outputs": [
					{
						"internalType": "bool",
						"name": "conditionsMet",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "checkPrizePool",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getLastTimeStamp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNumberOfPlayers",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "index",
						"type": "uint256"
					}
				],
				"name": "getPlayer",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRaffleState",
				"outputs": [
					{
						"internalType": "enum Lottery.RaffleState",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRecentWinner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_requestId",
						"type": "uint256"
					}
				],
				"name": "getRequestStatus",
				"outputs": [
					{
						"internalType": "bool",
						"name": "fulfilled",
						"type": "bool"
					},
					{
						"internalType": "uint256[]",
						"name": "randomWords",
						"type": "uint256[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lastRequestId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					},
					{
						"internalType": "uint256[]",
						"name": "randomWords",
						"type": "uint256[]"
					}
				],
				"name": "rawFulfillRandomWords",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "requestIds",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "requestRandomWords",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "requestId",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "s_requests",
				"outputs": [
					{
						"internalType": "bool",
						"name": "fulfilled",
						"type": "bool"
					},
					{
						"internalType": "bool",
						"name": "exists",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "s_vrfCoordinator",
				"outputs": [
					{
						"internalType": "contract IVRFCoordinatorV2Plus",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_vrfCoordinator",
						"type": "address"
					}
				],
				"name": "setCoordinator",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "string",
						"name": "_sponsorName",
						"type": "string"
					}
				],
				"name": "sponsorDonation",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "sponsors",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "ticketPrice",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This implements the Chainlink VRF Version 2",
			"kind": "dev",
			"methods": {
				"buyTicketAndEnterRaffle()": {
					"details": "Allows a player to buy a ticket and enter the raffle. Ensures that the correct ticket price is paid and that the raffle is open. Emits an `EnteredRaffle` event with the player's address."
				},
				"changeRaffleState()": {
					"details": "Toggles the raffle state between OPEN and CLOSED. Useful for pausing and resuming the raffle manually."
				},
				"checkConditions()": {
					"details": "Checks if all conditions to pick a winner are met:  - Raffle state is open  - Contract has a positive balance  - There are players who entered the raffle Returns `true` if all conditions are met, otherwise `false`."
				},
				"checkPrizePool()": {
					"details": "Returns the total balance of the contract, representing the prize pool for the raffle."
				},
				"getLastTimeStamp()": {
					"details": "Returns the timestamp of the beginning of the current raffle round."
				},
				"getNumberOfPlayers()": {
					"details": "Returns the number of players currently entered in the raffle."
				},
				"getPlayer(uint256)": {
					"details": "Returns the address of a player at a specific `index` in the players array."
				},
				"getRaffleState()": {
					"details": "Returns the current state of the raffle (OPEN or CLOSED)."
				},
				"getRecentWinner()": {
					"details": "Returns the most recent winner of the raffle."
				},
				"getRequestStatus(uint256)": {
					"details": "Returns the status of a specific request given its `requestId`. Checks if the request exists and returns whether it's fulfilled and the associated random words."
				},
				"requestRandomWords()": {
					"details": "Requests random words from Chainlink VRF to determine the raffle winner. Closes the raffle before making the request to prevent further entries. If conditions are met, a request for random words is made and the request ID is saved."
				},
				"sponsorDonation(string)": {
					"details": "Allows sponsors to donate Ether to the contract and adds the sponsor's name to the sponsors array. Requires the donation amount to be greater than 0."
				}
			},
			"title": "A Raffle Contract",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"acceptOwnership()": {
					"notice": "Allows an ownership transfer to be completed by the recipient."
				},
				"owner()": {
					"notice": "Get the current owner"
				},
				"setCoordinator(address)": {
					"notice": "Sets the VRF Coordinator addressThis method should only be callable by the coordinator or contract owner"
				},
				"transferOwnership(address)": {
					"notice": "Allows an owner to begin transferring ownership to a new address."
				}
			},
			"notice": "This contract is for creating a raffle contract",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/Lottery Game Project/Lottery.sol": "Lottery"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol": {
			"keccak256": "0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861",
			"license": "MIT",
			"urls": [
				"bzz-raw://f914a1b638300e82d8f5a020a4195235599afebab4ef1e10c6992f3c90e7df3e",
				"dweb:/ipfs/Qmf2MbuVB16qbCGii3U5cjcBvVjAHHYzKp9voJa2eDch9B"
			]
		},
		"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol": {
			"keccak256": "0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8",
			"license": "MIT",
			"urls": [
				"bzz-raw://fde3b9ac3a4c42ea43e2f92b037d32ab20e30818471c6e20d2590147a6c2958a",
				"dweb:/ipfs/QmQ2ohQP4GnhPUsiWCvCfb1dsoGYDdxSap3dxtnYTV4rmT"
			]
		},
		"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol": {
			"keccak256": "0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767",
			"license": "MIT",
			"urls": [
				"bzz-raw://17c636625a5d29a140612db496d2cca9fb4b48c673adb0fd7b3957d287e75921",
				"dweb:/ipfs/QmNoBX8TY424bdQWyQC7y3kpKfgxyWxhLw7KEhhEEoBN9q"
			]
		},
		"@chainlink/contracts/src/v0.8/vrf/dev/VRFConsumerBaseV2Plus.sol": {
			"keccak256": "0x0c92838396c5abe72754ebeae526a0434dd53fdaf63e6b98111aebd6114cfcc2",
			"license": "MIT",
			"urls": [
				"bzz-raw://fd0915715c5ad87db245b527514302b6da362894944299dd65c1382ca07b13d4",
				"dweb:/ipfs/QmQ2xcF7FQB33DAcpXuh4Jpx1PFniEjWbPMRatRgyp3UJW"
			]
		},
		"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFCoordinatorV2Plus.sol": {
			"keccak256": "0x7dca2a64690ddd95ee05e422e1f61e7c1d701aaf5be1390ae12e9bd144266c36",
			"license": "MIT",
			"urls": [
				"bzz-raw://d8a347ae8d28007a7537abdc153d3d400d330e02339e8070dd4d783dbdb4de2e",
				"dweb:/ipfs/QmT4rCRw9LBkTYnjRSLNoVP6qhMWA1xg7Hp3wGrRSsV5YL"
			]
		},
		"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFMigratableConsumerV2Plus.sol": {
			"keccak256": "0x8be8744e3b8380dc85354cf110e8caef8f394266e79120ad675a7da835ed2a85",
			"license": "MIT",
			"urls": [
				"bzz-raw://12df6d3bd2130709c9f923e5dc8d6e8014c1d4bc35a2722c849f46bdbe1ea9cb",
				"dweb:/ipfs/QmVswk94A2g9KEbK792tw5o4X27HWzP2cw7wPmuRr116js"
			]
		},
		"@chainlink/contracts/src/v0.8/vrf/dev/interfaces/IVRFSubscriptionV2Plus.sol": {
			"keccak256": "0x85b348297ce36794e3bf97a47c001fc216bd0ee243e91514a7b395f3fcd189b0",
			"license": "MIT",
			"urls": [
				"bzz-raw://5b67dd54c0f1083d804f9c0ac6b6a62db1727b090f6d1afb0a8107baea7b40d8",
				"dweb:/ipfs/QmbD4vuTA7sBtR4DxeDjKr2pC51xgw8RRef2AmodnH5B1F"
			]
		},
		"@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol": {
			"keccak256": "0x839ad7a737ef18147b518b4ec3cbaf4a49dc994db65cf8369ed4e69d169a98a6",
			"license": "MIT",
			"urls": [
				"bzz-raw://882f7357f1a4d7479adda35f81c130bb9a7bfa024d5b9617c75a0539116c2a1d",
				"dweb:/ipfs/QmWzLDgcS9jUh4AT65dQRr46ZhGHgQ4KoNfSdFiFTFqneQ"
			]
		},
		"contracts/Lottery Game Project/Lottery.sol": {
			"keccak256": "0xc166e2dbae65c15fdad13488fe1d7dd3a6b5a8e6bb695258d61c91b7e044c3e5",
			"license": "MIT",
			"urls": [
				"bzz-raw://b47a5631840cf52e66ecf70d71b1f20ace445eededacec74009d6b18cf986eed",
				"dweb:/ipfs/QmXDCNECRmEirAxEptx8yzUDQqodQ11W99t7v67VE81ts7"
			]
		}
	},
	"version": 1
}